// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-delete-customers/handlers (interfaces: IEventHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockIEventHandler is a mock of IEventHandler interface.
type MockIEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIEventHandlerMockRecorder
}

// MockIEventHandlerMockRecorder is the mock recorder for MockIEventHandler.
type MockIEventHandlerMockRecorder struct {
	mock *MockIEventHandler
}

// NewMockIEventHandler creates a new mock instance.
func NewMockIEventHandler(ctrl *gomock.Controller) *MockIEventHandler {
	mock := &MockIEventHandler{ctrl: ctrl}
	mock.recorder = &MockIEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventHandler) EXPECT() *MockIEventHandlerMockRecorder {
	return m.recorder
}

// HandleEvent mocks base method.
func (m *MockIEventHandler) HandleEvent(arg0 context.Context, arg1 *kafka.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleEvent", arg0, arg1)
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockIEventHandlerMockRecorder) HandleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockIEventHandler)(nil).HandleEvent), arg0, arg1)
}
