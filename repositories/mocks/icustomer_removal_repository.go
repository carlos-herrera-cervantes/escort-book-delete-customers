// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-delete-customers/repositories (interfaces: ICustomerRemovalRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-delete-customers/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockICustomerRemovalRepository is a mock of ICustomerRemovalRepository interface.
type MockICustomerRemovalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerRemovalRepositoryMockRecorder
}

// MockICustomerRemovalRepositoryMockRecorder is the mock recorder for MockICustomerRemovalRepository.
type MockICustomerRemovalRepositoryMockRecorder struct {
	mock *MockICustomerRemovalRepository
}

// NewMockICustomerRemovalRepository creates a new mock instance.
func NewMockICustomerRemovalRepository(ctrl *gomock.Controller) *MockICustomerRemovalRepository {
	mock := &MockICustomerRemovalRepository{ctrl: ctrl}
	mock.recorder = &MockICustomerRemovalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomerRemovalRepository) EXPECT() *MockICustomerRemovalRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICustomerRemovalRepository) Create(arg0 context.Context, arg1 models.CustomerRemoval) (models.CustomerRemoval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.CustomerRemoval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICustomerRemovalRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICustomerRemovalRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockICustomerRemovalRepository) Delete(arg0 context.Context, arg1 primitive.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICustomerRemovalRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICustomerRemovalRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockICustomerRemovalRepository) Get(arg0 context.Context, arg1 primitive.M) (models.CustomerRemoval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.CustomerRemoval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICustomerRemovalRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICustomerRemovalRepository)(nil).Get), arg0, arg1)
}

// GetMany mocks base method.
func (m *MockICustomerRemovalRepository) GetMany(arg0 context.Context, arg1 primitive.M, arg2, arg3 int64) ([]models.CustomerRemoval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.CustomerRemoval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockICustomerRemovalRepositoryMockRecorder) GetMany(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockICustomerRemovalRepository)(nil).GetMany), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockICustomerRemovalRepository) Update(arg0 context.Context, arg1 primitive.M, arg2 interface{}) (models.CustomerRemoval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.CustomerRemoval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockICustomerRemovalRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICustomerRemovalRepository)(nil).Update), arg0, arg1, arg2)
}
